---
import SendIcon from "@/icons/Send.astro";
---

<form method="POST" id="form">
  <input
    type="hidden"
    name="access_key"
    value="ac28a741-a433-406e-a9bb-5d5070d7bf5f"
  />
  <div class="grid md:grid-cols-2 md:gap-6">
    <div class="relative z-0 w-full mb-5 group">
      <input
        type="text"
        name="Name"
        id="floating_first_name"
        class="block py-2.5 px-0 w-full text-sm bg-transparent border-0 border-b-2 border-gray-300 appearance-none text-white dark:border-gray-600 dark:focus:border-yellow-200 focus:outline-none focus:ring-0 focus:border-yellow-200 peer"
        placeholder=" "
      />
      <label
        for="floating_first_name"
        class="peer-focus:font-medium absolute text-sm text-gray-500 dark:text-gray-400 duration-300 transform -translate-y-6 scale-75 top-3 -z-10 origin-[0] peer-focus:start-0 rtl:peer-focus:translate-x-1/4 peer-focus:text-yellow-200 peer-focus:dark:text-blue-500 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
        >Full Name</label
      >
    </div>
    <div class="relative z-0 w-full mb-5 group">
      <input
        type="email"
        name="Email"
        id="floating_email"
        class="block py-2.5 px-0 w-full text-sm bg-transparent border-0 border-b-2 border-gray-300 appearance-none text-white dark:border-gray-600 dark:focus:border-yellow-200 focus:outline-none focus:ring-0 focus:border-yellow-200 peer"
        placeholder=" "
      />
      <label
        for="floating_email"
        class="peer-focus:font-medium absolute text-sm text-gray-500 dark:text-gray-400 duration-300 transform -translate-y-6 scale-75 top-3 -z-10 origin-[0] peer-focus:start-0 rtl:peer-focus:translate-x-1/4 rtl:peer-focus:left-auto peer-focus:text-yellow-200 peer-focus:dark:text-blue-500 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
        >Email address</label
      >
    </div>
  </div>
  <div class="relative z-0 w-full mb-5 group">
    <input
      type="text"
      name="Subject"
      id="floating_password"
      class="block py-2.5 px-0 w-full text-sm bg-transparent border-0 border-b-2 border-gray-300 appearance-none text-white dark:border-yellow-200 dark:focus:border-yellow-200 focus:outline-none focus:ring-0 focus:border-yellow-200 peer"
      placeholder=" "
    />
    <label
      for="floating_password"
      class="peer-focus:font-medium absolute text-sm text-gray-500 duration-300 transform -translate-y-6 scale-75 top-3 -z-10 origin-[0] peer-focus:start-0 rtl:peer-focus:translate-x-1/4 peer-focus:text-yellow-200 peer-focus:dark:text-yellow-200 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
      >Subject</label
    >
  </div>
  <div class="relative z-0 w-full mb-5 group">
    <textarea
      name="Message"
      id="message"
      rows="4"
      class="block mt-4 py-2.5 px-0 w-full text-sm bg-transparent border-0 border-b-2 border-gray-300 appearance-none text-white dark:border-gray-600 dark:focus:border-blue-500 focus:outline-none focus:ring-0 focus:border-yellow-200 peer"
      placeholder="Your message goes here..."></textarea>
  </div>
  <button
    type="submit"
    id="result"
    class={`
    bg-white/5
    border border-white/10  rounded-full 
    flex justify-center items-center gap-x-2 
    py-1 px-2 md:py-2 md:px-4 
    text-xs lg:text-base
    text-white  
    transition
    hover:scale-110 hover:bg-white/10 
    mt-8
    `}>Send Message<SendIcon /></button
  >
</form>

<script is:inline>
  const form = document.getElementById("form");
  const result = document.getElementById("result");

  form.addEventListener("submit", function (e) {
    e.preventDefault();

    // Reset previous error messages
    const errorMessages = document.querySelectorAll(".error-message");
    errorMessages.forEach((message) => message.remove());

    // Validate inputs
    const inputs = form.querySelectorAll("input, textarea");
    let isValid = true;
    inputs.forEach((input) => {
      if (!input.value.trim()) {
        isValid = false;
        displayErrorMessage(input, `${input.name} is required`);
      } else if (input.type === "email" && !isValidEmail(input.value.trim())) {
        isValid = false;
        displayErrorMessage(input, "Invalid email address");
      }
    });

    if (!isValid) return;

    // Form data processing
    const formData = new FormData(form);
    const object = Object.fromEntries(formData);
    const json = JSON.stringify(object);

    result.innerHTML = "Please wait!";

    fetch("https://api.web3forms.com/submit", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      body: json,
    })
      .then(async (response) => {
        let json = await response.json();
        if (response.status == 200) {
          result.innerHTML = json.message;
        } else {
          console.log(response);
          result.innerHTML = json.message;
        }
      })
      .catch((error) => {
        console.log(error);
        result.innerHTML = "Something went wrong!";
      })
      .then(function () {
        form.reset();
        setTimeout(() => {
          result.style.display = "none";
        }, 3000);
      });
  });

  // Email validation function
  function isValidEmail(email) {
    // Regular expression for email validation
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  }

  // Function to display error message
  function displayErrorMessage(input, message) {
    const errorMessage = document.createElement("span");
    errorMessage.classList.add("error-message", "text-red-500", "text-sm");
    errorMessage.textContent = message;
    input.parentNode.appendChild(errorMessage);

    // Add event listener to clear error message when input is typed
    input.addEventListener("input", function () {
      errorMessage.remove();
    });
  }
</script>
